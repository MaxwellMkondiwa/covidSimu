---
title: "Results of a COVID-19 Simulation Model"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
runtime: shiny
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
library(tidyverse)
library(xts)
library(dygraphs)
library(ggthemes)

main_categories <- c("Covid-19 midterm projection for continued Lockdown",
                     "Covid-19 midterm projection for a general exit on May 4th",
                     "Covid-19 midterm projection for construction worker release on April 20th",
                     "Covid-19 midterm projection for constructino worker release with testing and 25% efficent backtracing",
                     "Covid-19 midterm projection for constructino worker release with testing and 25% efficent backtracing")

lockdown_continued <- read.csv("https://download.data.public.lu/resources/covid-19-midterm-projection-for-continued-lockdown/20200424-090839/simulation-lockdown-continued.csv") %>% 
    mutate(dataset = "lockdown_continued")

general_ext <- read.csv("https://download.data.public.lu/resources/covid-19-midterm-projection-for-a-general-exit-on-may-4th/20200424-091111/simulation-general-exit-4may.csv") %>% 
    mutate(dataset = "general_ext")

workers_no_test <- read.csv("https://download.data.public.lu/resources/covid-19-midterm-projection-for-construction-worker-release-on-april-20th/20200424-091408/simulation-construction-workers20apr-no-test-no-trace.csv") %>% 
    mutate(dataset = "workers_no_test")

workers_25 <- read.csv("https://download.data.public.lu/resources/covid-19-midterm-projection-for-construction-worker-release-on-april-20th-with-testing-and-back-tracing/20200424-091607/simulation-construction-workers20apr-tracing25.csv") %>% 
    mutate(dataset = "workers_25")

workers_50 <- read.csv("https://download.data.public.lu/resources/covid-19-midterm-projection-for-construction-worker-release-on-april-20th-with-testing/20200424-091730/simulation-construction-workers20apr-tracing50.csv") %>% 
    mutate(dataset = "workers_50")

full_data <- bind_rows(
    list(lockdown_continued, general_ext, workers_no_test, workers_25, workers_50)
)
```

Inputs {.sidebar}
-----------------------------------------------------------------------

```{r}

selectInput(inputId = "datasetName", 
            label = "Choose a dataset", 
            choices = unique(full_data$dataset))

selectInput(inputId = "seriesName",
            label = "Choose one or more series",
            choices = c("ICU.occupancy", "Total.cumulative.cases", "Number.of.deaths"),
            multiple = FALSE, selected = c("Total.cumulative.cases"))

```

Open data provided by the University of Luxembourg. This data shows simulations of different exit
scenarios. I am not responsible for the results; this app merely shows the data that was simulated by a 
research team of the university. Caution must be taken when interpreting results.

Source: https://data.public.lu/fr/organizations/university-of-luxembourg-1/

Layout based on https://jjallaire.shinyapps.io/shiny-biclust/

Row
-----------------------------------------------------------------------

### Simulation results
    
```{r}

#shinipsum::random_dygraph()
dfInput <- reactive({
        filtered_data <- full_data %>% 
          filter(dataset == input$datasetName) %>% 
            select(Date, starts_with(input$seriesName))
        
        xts(filtered_data[, -1], order.by = as.Date(filtered_data[, 1], "%d/%m/%Y"))
    })

renderDygraph({
    df <- dfInput()
    dygraph(df) %>% 
        dyRangeSelector(dateWindow = c("2020-03-01", "2021-03-01"))
})
# 
#     dfInput2 <- reactive({
#         df %>% filter(Activities %in% main_categories,
#                       Population %in% input$populationName,
#                       day %in% input$dayName)
#     })
#     
#   renderPlotly({
# 
#         df1 <- dfInput()
# 
#         p1 <- ggplot(df1, 
#                      aes(x = Activities, y = time_in_minutes, fill = Population)) +
#             geom_col(position = "dodge") + 
#             theme_minimal() + 
#             xlab("Activities") + 
#             ylab("Time in minutes") +
#             scale_fill_gdocs()
# 
#         ggplotly(p1)})
```
